

const wheel = document.querySelector('.wheel')
wheel.style.transform = 'rotate(0deg)'

let progress = 0
let startProgress = 0
let val = 0
let nex = null
let degreeAngle = null
let startTouches = null

// ------------------------------------- TOUCHSTART
const touchStart = (event) => {
  startProgress = progress

  nex = wheel.style.transform    // nex - touchstart 의 현재 회전 각도
  nex = parseFloat(nex.slice(7)) // 
  
  // 첫 번째 터치 좌표를 얻습니다
  startTouches = {
    x: event.changedTouches[0].pageX,
    y: event.changedTouches[0].pageY
  }
}

// ------------------------------------- TOUCHMOVE
const touchMove = (event) => {
  // 접촉 좌표를 얻습니다
  const touch = {
    x: event.changedTouches[0].pageX,
    y: event.changedTouches[0].pageY
  }
  
  // 원의 중심
  const center = {
    x: wheel.offsetLeft + wheel.offsetWidth / 2,
    y: wheel.offsetTop + wheel.offsetHeight / 2
  }
  
  // 거리 - 최대 +
  let distance = Math.atan2(
    (center.x - touch.x) * (center.y - startTouches.y) - (center.y - touch.y) * (center.x - startTouches.x),
    (center.x - touch.x) * (center.x - startTouches.x) + (center.y - touch.y) * (center.y - startTouches.y)
  )
  
  distance *= -1
  
  degreeAngle = distance * (180 / Math.PI)
  val = degreeAngle + nex
  wheel.style.transform = `rotate(${ val }deg)`
}

wheel.addEventListener('touchstart', touchStart)
wheel.addEventListener('touchmove', touchMove)




nextTick => 업데이트 된 dom에 접근가능



휠 버튼이 5개일 경우
가까운 위치의 버튼에 따라 클래스명 바인딩 후
휠 살짝 돌리기




const touchStart = (event) => {
  nex = wheel.value.style.transform;
  nex = parseFloat(nex.slice(7));
  styleObject.startTouches = {
    x: event.changedTouches[0].pageX,
    y: event.changedTouches[0].pageY,
  };`
};
const touchMove = (event) => {
  // 접촉 좌표를 얻습니다
  const touch = {
    x: event.changedTouches[0].pageX,
    y: event.changedTouches[0].pageY,
  };
  // 원의 중심
  const center = {
    x: wheel.value.offsetLeft + wheel.value.offsetWidth / 2,
    y: wheel.value.offsetTop + wheel.value.offsetHeight / 2,
  };
  // 거리 - 최대 +
  let distance = Math.atan2(
    (center.x - touch.x) * (center.y - startTouches.y) - (center.y - touch.y) * (center.x - startTouches.x),
    (center.x - touch.x) * (center.x - startTouches.x) + (center.y - touch.y) * (center.y - startTouches.y),
  );
  distance *= -1;
  styleObject.degreeAngle = distance * (180 / Math.PI);
  styleObject.rotate = styleObject.degreeAngle + styleObject.nex;
  wheel.value.style.transform = `rotate(${styleObject.rotate}deg)`;
};